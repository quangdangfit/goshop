definitions:
  paging.Pagination:
    properties:
      current_page:
        type: integer
      limit:
        type: integer
      skip:
        type: integer
      total:
        type: integer
      total_page:
        type: integer
    type: object
  serializers.ChangePasswordReq:
    properties:
      new_password:
        type: string
      password:
        type: string
    required:
    - new_password
    - password
    type: object
  serializers.CreateProductReq:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
    required:
    - description
    - name
    type: object
  serializers.ListOrderRes:
    properties:
      orders:
        items:
          $ref: '#/definitions/serializers.Order'
        type: array
      pagination:
        $ref: '#/definitions/paging.Pagination'
    type: object
  serializers.ListProductRes:
    properties:
      pagination:
        $ref: '#/definitions/paging.Pagination'
      products:
        items:
          $ref: '#/definitions/serializers.Product'
        type: array
    type: object
  serializers.LoginReq:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  serializers.LoginRes:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/serializers.User'
    type: object
  serializers.Order:
    properties:
      code:
        type: string
      id:
        type: string
      lines:
        items:
          $ref: '#/definitions/serializers.OrderLine'
        type: array
      status:
        type: string
      total_price:
        type: number
    type: object
  serializers.OrderLine:
    properties:
      price:
        type: number
      product:
        $ref: '#/definitions/serializers.Product'
      quantity:
        type: integer
    type: object
  serializers.PlaceOrderLineReq:
    properties:
      product_id:
        type: string
      quantity:
        type: integer
    required:
    - product_id
    - quantity
    type: object
  serializers.PlaceOrderReq:
    properties:
      lines:
        items:
          $ref: '#/definitions/serializers.PlaceOrderLineReq'
        maxItems: 5
        type: array
      user_id:
        type: string
    required:
    - lines
    - user_id
    type: object
  serializers.Product:
    properties:
      active:
        type: boolean
      code:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      updated_at:
        type: string
    type: object
  serializers.RegisterReq:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  serializers.RegisterRes:
    properties:
      user:
        $ref: '#/definitions/serializers.User'
    type: object
  serializers.UpdateProductReq:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        minimum: 0
        type: number
    type: object
  serializers.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact:
    email: quangdangfit@gmail.com
    name: API Support
  description: Swagger API for Golang Project Blueprint.
  license:
    name: MIT
    url: https://github.com/MartinHeinz/go-project-blueprint/blob/master/LICENSE
  termsOfService: http://swagger.io/terms/
  title: Blueprint Swagger API
  version: "1.0"
paths:
  /api/v1/orders:
    get:
      parameters:
      - in: query
        name: code
        type: string
      - in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.ListOrderRes'
      security:
      - ApiKeyAuth: []
      summary: get my orders
      tags:
      - orders
    post:
      parameters:
      - description: Body
        in: body
        name: _
        required: true
        schema:
          $ref: '#/definitions/serializers.PlaceOrderReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.Order'
      security:
      - ApiKeyAuth: []
      summary: place order
      tags:
      - orders
  /api/v1/orders/{id}:
    get:
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.Order'
      security:
      - ApiKeyAuth: []
      summary: get order details
      tags:
      - orders
  /api/v1/orders/{id}/cancel:
    put:
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: cancel order
      tags:
      - orders
  /api/v1/products:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.ListProductRes'
      summary: Get list products
      tags:
      - products
    post:
      parameters:
      - description: Body
        in: body
        name: _
        required: true
        schema:
          $ref: '#/definitions/serializers.CreateProductReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.Product'
      security:
      - ApiKeyAuth: []
      summary: create product
      tags:
      - products
  /api/v1/products/{id}:
    get:
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.Product'
      summary: Get product by id
      tags:
      - products
    put:
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: _
        required: true
        schema:
          $ref: '#/definitions/serializers.UpdateProductReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.Product'
      security:
      - ApiKeyAuth: []
      summary: update product
      tags:
      - products
  /auth/change-password:
    put:
      parameters:
      - description: Body
        in: body
        name: _
        required: true
        schema:
          $ref: '#/definitions/serializers.ChangePasswordReq'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: changes the password
      tags:
      - users
  /auth/login:
    post:
      parameters:
      - description: Body
        in: body
        name: _
        required: true
        schema:
          $ref: '#/definitions/serializers.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.LoginRes'
      summary: Login
      tags:
      - users
  /auth/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.User'
      security:
      - ApiKeyAuth: []
      summary: get my profile
      tags:
      - users
  /auth/register:
    post:
      parameters:
      - description: Body
        in: body
        name: _
        required: true
        schema:
          $ref: '#/definitions/serializers.RegisterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.RegisterRes'
      summary: Register new user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
